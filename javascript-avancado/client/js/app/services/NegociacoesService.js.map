{"version":3,"sources":["../../app-es6/services/NegociacoesService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDao","Negociacao","NegociacaoService","_http","get","then","negociacoes","map","Date","objeto","data","quantidade","valor","catch","console","log","erro","Error","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","negociacao","getConnection","conexao","dao","adiciona","listaTodos","apagarTodos","listaAtual","obterNegociacoes","filter","some","IsEquals","negociacaoExistente"],"mappings":"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","file":"NegociacoesService.js","sourcesContent":["import {HttpService} from './HttpService';\nimport {ConnectionFactory} from './ConnectionFactory';\nimport {NegociacaoDao} from '../dao/NegociacaoDao';\nimport {Negociacao} from '../models/Negociacao';\n\nexport class NegociacaoService {\n    constructor(){\n        this._http = new HttpService();\n    }\n\n    obterNegociacoesDaSemana() {\n      return this._http\n          .get('negociacoes/semana')\n          .then(negociacoes=>{\n             return negociacoes.map(objeto=> new Negociacao(new Date(objeto.data) ,objeto.quantidade, objeto.valor));\n          })\n          .catch(erro=>{\n            console.log(erro);\n            throw new Error ('Não foi possível obter as negociações da semana anterior');\n        })\n    }\n\n   obterNegociacoesDaSemanaAnterior() {\n     return this._http\n         .get('negociacoes/anterior')\n         .then(negociacoes=>{\n           return negociacoes.map(objeto=> new Negociacao(new Date(objeto.data) ,objeto.quantidade, objeto.valor));\n         })\n         .catch(erro=>{\n           console.log(erro);\n           throw new Error('Não foi possível obter as negociações da semana anterior');\n         })\n    }\n\n    obterNegociacoesDaSemanaRetrasada() {\n\n      return this._http\n          .get('negociacoes/retrasada')\n          .then(negociacoes=>{\n            return negociacoes.map(objeto=> new Negociacao(new Date(objeto.data) , objeto.quantidade, objeto.valor));\n          })\n          .catch(erro=>{\n            console.log(erro);\n            throw new Error('Não foi possível obter as negociações da semana retrasada');\n          })\n    }\n\n    obterNegociacoes(){\n      return Promise.all([\n        this.obterNegociacoesDaSemana(),\n        this.obterNegociacoesDaSemanaAnterior(),\n        this.obterNegociacoesDaSemanaRetrasada()])\n      .then(periodos => {\n          let negociacoes = periodos.reduce((dados,periodo)=> dados.concat(periodo),[]);\n          return negociacoes;\n        })\n      .catch(erro => {\n        throw new Error(erro);\n      });\n\n    }\n\n    cadastra(negociacao){\n      return ConnectionFactory\n          .getConnection()\n          .then(conexao => new NegociacaoDao(conexao))\n          .then(dao => dao.adiciona(negociacao))\n          .then(() => 'Negociacao adicionada com sucesso')\n          .catch(() => {\n            throw new Error('Não foi possivel adicionar a negociação')\n          });\n    }\n\n    lista(){\n      return ConnectionFactory\n          .getConnection()\n          .then(conexao => new NegociacaoDao(conexao))\n          .then(dao => dao.listaTodos())\n          .catch((erro) => {\n            console.log(erro)\n            throw new Error('Não foi possivel listar a negociação');\n          });\n    }\n\n    apagarTodos(){\n      return ConnectionFactory\n          .getConnection()\n          .then(conexao => new NegociacaoDao(conexao))\n          .then(dao => dao.apagarTodos())\n          .catch((erro) => {\n            console.log(erro)\n            throw new Error('Não foi possivel listar a negociação');\n          });\n    }\n\n    importa(listaAtual){\n      return this.obterNegociacoes()\n                  .then(negociacoes =>\n                    negociacoes.filter(negociacao =>\n                    !listaAtual.some(negociacaoExistente =>\n                      negociacao.IsEquals(negociacaoExistente)))\n                  )\n                  .catch(erro =>{\n                      console.log(erro);\n                  });\n    }\n}\n"]}